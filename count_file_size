#!/usr/bin/env ruby

require 'zlib'

def zip_file(path)
  File.read("./#{path}")
    .then { Zlib::Deflate.deflate(_1, Zlib::BEST_COMPRESSION) }
    .then { File.write('./temp.zip', _1) }
end

def delete_temp_zip_if_exists
  system "rm temp.zip 2>/dev/null"
end

def count_zipped_file_size(path)
  delete_temp_zip_if_exists
  zip_file(path)
  zipped_size = `wc -c < temp.zip`.chomp
  delete_temp_zip_if_exists

  zipped_size
end

def count_lines(path)
  `wc -l < #{path}`.chomp
end

def count_non_blank_lines(path)
  `cat #{path} | sed '/^\s*$/d' | wc -l`.chomp
end

puts "== ZIPPED FILE SIZE =="
puts "  Linked List"
puts "    - Cpp: #{count_zipped_file_size("Cpp/LinkedList.hpp")} bytes"
puts "    - Elm: #{count_zipped_file_size("Elm/src/LinkedList.elm")} bytes"
puts "    - Haskell: #{count_zipped_file_size("Haskell/LinkedList.hs")} bytes"
puts "    - TypeScript: #{count_zipped_file_size("TypeScript/LinkedList.ts")} bytes"
puts "  Binary Search Tree"
puts "    - Cpp: #{count_zipped_file_size("Cpp/BinarySearchTree.hpp")} bytes"
puts "    - Elm: #{count_zipped_file_size("Elm/src/BinarySearchTree.elm")} bytes"
puts "    - Haskell: #{count_zipped_file_size("Haskell/BinarySearchTree.hs")} bytes"
puts "    - TypeScript: #{count_zipped_file_size("TypeScript/BinarySearchTree.ts")} bytes"
puts
puts "== LINES =="
puts "  Linked List"
puts "    - Cpp: #{count_lines("Cpp/LinkedList.hpp")} lines"
puts "    - Elm: #{count_lines("Elm/src/LinkedList.elm")} lines"
puts "    - Haskell: #{count_lines("Haskell/LinkedList.hs")} lines"
puts "    - TypeScript: #{count_lines("TypeScript/LinkedList.ts")} lines"
puts "  Binary Search Tree"
puts "    - Cpp: #{count_lines("Cpp/BinarySearchTree.hpp")} lines"
puts "    - Elm: #{count_lines("Elm/src/BinarySearchTree.elm")} lines"
puts "    - Haskell: #{count_lines("Haskell/BinarySearchTree.hs")} lines"
puts "    - TypeScript: #{count_lines("TypeScript/BinarySearchTree.ts")} lines"
puts
puts "== NON-BLANK LINES =="
puts "  Linked List"
puts "    - Cpp: #{count_non_blank_lines("Cpp/LinkedList.hpp")} lines"
puts "    - Elm: #{count_non_blank_lines("Elm/src/LinkedList.elm")} lines"
puts "    - Haskell: #{count_non_blank_lines("Haskell/LinkedList.hs")} lines"
puts "    - TypeScript: #{count_non_blank_lines("TypeScript/LinkedList.ts")} lines"
puts "  Binary Search Tree"
puts "    - Cpp: #{count_non_blank_lines("Cpp/BinarySearchTree.hpp")} lines"
puts "    - Elm: #{count_non_blank_lines("Elm/src/BinarySearchTree.elm")} lines"
puts "    - Haskell: #{count_non_blank_lines("Haskell/BinarySearchTree.hs")} lines"
puts "    - TypeScript: #{count_non_blank_lines("TypeScript/BinarySearchTree.ts")} lines"
